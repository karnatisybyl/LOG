// def NEW_TAG = 'initial_value'

pipeline {
agent any
    
    options {
        buildDiscarder logRotator( 
            daysToKeepStr: '16', 
            numToKeepStr: '10'
        )
        disableConcurrentBuilds()
    }
    tools {
        maven "maven"
    }
    environment{
		DEPLOYMENT_REPO = "nbc_mi_deployment"
        DOCOKER_DIRECTORY = "MIDocker"
        HELM_REPO = "wso2_helmchart_uat"
    }

    stages {

		stage('Clone Deployment Git Repo') {
            steps {
                checkout([$class: 'GitSCM', 
                    branches: [[name: '*/main']], 
                    doGenerateSubmoduleConfigurations: false, 
                    extensions: [[ $class: 'RelativeTargetDirectory', relativeTargetDir: 'nbc_mi_deployment']],
                    submoduleCfg: [], 
                   userRemoteConfigs: [[credentialsId: 'gitlab', url: 'https://gitlabprod.intra.nbc.co.tz/wso2/nbc_mi_deployment.git']]])
            }
        }

        stage('Building Tags') {
            steps {
                script {
                    echo "building $env.GIT_BRANCH branch..."
                    Date date = new Date()
                    String datePart = date.format("dd-MM-yyyy")
                    String timePart = date.format("HH-mm-ss")
                    println "datePart : " + datePart + "\ttimePart : " + timePart
                    String tag = 'uat_'+datePart+'_'+timePart
                    sh "echo $tag > tagFile.txt"
                    println tag     
                }		                    
            }
        }
        
        stage('Docekr Build Image') {
      	    steps {
                script {
                    NEW_TAG = readFile('tagFile.txt').trim()
                    echo NEW_TAG
                    sh "sed -i 's/imagetag/${NEW_TAG}/g' MIDocker/buildconfig.yaml"
                    sh '''
                    cp -r $DEPLOYMENT_REPO/*.car $DOCOKER_DIRECTORY/repository/deployment/server/carbonapps/
             	    cd $DOCOKER_DIRECTORY
                    oc login --insecure-skip-tls-verify=true --token=${TOKEN} --server=https://api.ocp4-kawe.tz.af.absa.local:6443 && oc project common-svc && oc apply -f buildconfig.yaml
                    oc start-build mi-uat-build --from-dir="." --follow
                    sleep 30
                    oc delete bc mi-uat-build
                    '''   
                }
            }
        }
        stage('Clone Helm Git Repo') {
            steps {
                checkout([$class: 'GitSCM', 
                    branches: [[name: '*/main']], 
                    doGenerateSubmoduleConfigurations: false, 
                    extensions: [[ $class: 'RelativeTargetDirectory', relativeTargetDir: 'wso2_helmchart_uat']],
                    submoduleCfg: [], 
                    userRemoteConfigs: [[credentialsId: 'gitlab', url: 'https://gitlabprod.intra.nbc.co.tz/wso2/wso2_helmchart_uat.git']]])
            }
        }

        stage('Helm Upgrade') {
            steps {
                script {
                    gittag = readFile('tagFile.txt').trim()
                    echo gittag
                	// sh "cd $HELM_REPO"
                    sh "oc login --insecure-skip-tls-verify=true --token=${TOKEN} --server=https://api.ocp4-kawe.tz.af.absa.local:6443 && oc project integration-patform-dev"
                    sh "cd ${HELM_REPO} && helm upgrade wso2amdev advanced/am-pattern-3 --version 4.2.0-1 --set 'wso2.deployment.mi.imageTag=${gittag}'" 
    		    }	
           }
        }

        stage('Cleanup workspace'){
            steps{
            //	echo "ok"
                cleanWs()
            }
        }

    }
}
